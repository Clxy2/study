package cn.clxy.game.tetris.view;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Frame;
import java.awt.font.TextAttribute;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Map;

import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

import org.jdesktop.application.Action;
import org.jdesktop.application.Application;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.beansbinding.AutoBinding;
import org.jdesktop.beansbinding.BindingGroup;

import cn.clxy.game.tetris.App;
import cn.clxy.game.tetris.model.Score;
import cn.clxy.game.tetris.model.ScoreList;
import cn.clxy.game.tetris.util.ColumnInfo;
import cn.clxy.game.tetris.util.FormattedTextFieldRenderer;
import cn.clxy.game.tetris.util.SwingUtil;
import cn.clxy.game.tetris.util.TableBinding;

/**
 * @author clxy
 */
public class ScoreHistoryDialog extends javax.swing.JDialog {

    public ScoreHistoryDialog(Frame owner) {
        this(owner, false);
    }

    /** Creates new form ScoreHistoryDialog */
    public ScoreHistoryDialog(java.awt.Frame parent, boolean modal) {

        super(parent, modal);

        initComponents();
        initBackground();

        initBindings();
        getRootPane().setDefaultButton(closeButton);
    }

    @Action
    public void closeAboutBox() {
        dispose();
    }

    private void initBackground() {

        ImageIcon ii = SwingUtil.getResource(App.class, getClass()).getImageIcon("background");
        if (ii != null) {
            // ((ImagePanel) bgPanel).setImg(ii.getImage());
        }

        tableScrollPane.getColumnHeader().setOpaque(false);

        JTableHeader header = table.getTableHeader();
        TableCellRenderer headerRenderer = header.getDefaultRenderer();
        if (headerRenderer instanceof JLabel) {
            ((JLabel) headerRenderer).setOpaque(false);
        }
    }

    private void initBindings() {

        BindingGroup group = new BindingGroup();
        TableBinding tableBinding = ((ScoreTable) table)
                .getBinding(AutoBinding.UpdateStrategy.READ);
        group.addBinding(tableBinding.getBinding());
        group.bind();

        TableColumnModel columns = table.getColumnModel();

        columns.getColumn(1).setCellRenderer(
                new FormattedTextFieldRenderer(new DecimalFormat("#,###")));
        columns.getColumn(2).setCellRenderer(
                new FormattedTextFieldRenderer(new DecimalFormat("#,###")));
        columns.getColumn(3).setCellRenderer(
                new FormattedTextFieldRenderer(new DecimalFormat("#,###")));

        // Create date and update date.
        String dateFormat = resource.getString("date.format");
        TableColumn create = columns.getColumn(4);
        create.setCellRenderer(new FormattedTextFieldRenderer(new SimpleDateFormat(dateFormat)));
        TableColumn update = columns.getColumn(5);
        update.setCellRenderer(new FormattedTextFieldRenderer(new SimpleDateFormat(dateFormat)));
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgPanel = new ImagePanel();
        titlePanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        buttonPanel = new javax.swing.JPanel();
        closeButton = new javax.swing.JButton();
        tablePanel = new javax.swing.JPanel();
        tableScrollPane = new javax.swing.JScrollPane();
        table = new ScoreTable(scores, columnInfos);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application
                .getInstance(cn.clxy.game.tetris.App.class).getContext().getResourceMap(
                        ScoreHistoryDialog.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setModal(true);
        setName("Form"); // NOI18N
        getContentPane().setLayout(new java.awt.BorderLayout(5, 5));

        bgPanel.setName("bgPanel"); // NOI18N
        bgPanel.setLayout(new java.awt.BorderLayout(10, 10));

        titlePanel.setName("titlePanel"); // NOI18N
        titlePanel.setOpaque(false);
        titlePanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 10));

        titleLabel.setFont(resourceMap.getFont("titleLabel.font")); // NOI18N
        titleLabel.setText(resourceMap.getString("titleLabel.text")); // NOI18N
        titleLabel.setName("titleLabel"); // NOI18N
        titlePanel.add(titleLabel);

        bgPanel.add(titlePanel, java.awt.BorderLayout.NORTH);

        buttonPanel.setName("buttonPanel"); // NOI18N
        buttonPanel.setOpaque(false);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(
                cn.clxy.game.tetris.App.class).getContext().getActionMap(ScoreHistoryDialog.class,
                this);
        closeButton.setAction(actionMap.get("closeAboutBox")); // NOI18N
        closeButton.setText(resourceMap.getString("closeButton.text")); // NOI18N
        closeButton.setName("closeButton"); // NOI18N
        buttonPanel.add(closeButton);

        bgPanel.add(buttonPanel, java.awt.BorderLayout.SOUTH);

        tablePanel.setName("tablePanel"); // NOI18N
        tablePanel.setOpaque(false);
        tablePanel.setLayout(new java.awt.BorderLayout());

        tableScrollPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tableScrollPane.setName("tableScrollPane"); // NOI18N
        tableScrollPane.setOpaque(false);
        tableScrollPane.getViewport().setOpaque(false);

        table.setForeground(resourceMap.getColor("table.foreground")); // NOI18N
        table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        table.setGridColor(resourceMap.getColor("table.gridColor")); // NOI18N
        table.setName("table"); // NOI18N
        table.setOpaque(false);
        table.setRowHeight(30);
        SwingUtil.setTableHeaderAlignment(table, JLabel.CENTER);
        table.getTableHeader().setReorderingAllowed(false);
        tableScrollPane.setViewportView(table);

        tablePanel.add(tableScrollPane, java.awt.BorderLayout.CENTER);

        bgPanel.add(tablePanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(bgPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bgPanel;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton closeButton;
    private javax.swing.JTable table;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JPanel titlePanel;
    // End of variables declaration//GEN-END:variables
    private static final Application app = Application.getInstance(App.class);
    private static final ResourceMap resource = app.getContext().getResourceMap(
            ScoreHistoryDialog.class);
    private static final List<ColumnInfo> columnInfos = ColumnInfo.getColumns(resource);
    private static final List<Score> scores = ScoreList.getList();

    private static class ScoreTable extends JTable {

        private List<Score> scores;
        private List<ColumnInfo> cis;

        public ScoreTable(List<Score> scores, List<ColumnInfo> cis) {

            super();
            this.scores = scores;
            this.cis = cis;
            TableColumnModel columns = getColumnModel();
            for (ColumnInfo ci : cis) {
                TableColumn column = new TableColumn();
                column.setHeaderValue(ci.getTitle());
                columns.addColumn(column);
            }
        }

        public TableBinding getBinding(AutoBinding.UpdateStrategy strategy) {

            TableBinding binding = new TableBinding(strategy, scores, this);
            TableBinding.setColumnBinding(cis, binding);
            return binding;
        }

        @Override
        public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {

            Component c = super.prepareRenderer(renderer, row, column);

            if (!(c instanceof JComponent)) {
                return c;
            }

            JComponent jc = (JComponent) c;
            jc.setOpaque(false);
            Font f = jc.getFont();
            Map<TextAttribute, Object> tas = (Map<TextAttribute, Object>) f.getAttributes();
            Float size = (Float) tas.get(TextAttribute.SIZE);

            switch (row) {
            case 0:
                jc.setForeground(Color.red);
                tas.put(TextAttribute.SIZE, size + 5);
                tas.put(TextAttribute.WEIGHT, TextAttribute.WEIGHT_BOLD);
                jc.setFont(f.deriveFont(tas));
                break;
            case 1:
                tas.put(TextAttribute.SIZE, size + 3);
                jc.setFont(f.deriveFont(tas));
                jc.setForeground(Color.magenta);
                break;
            case 2:
                tas.put(TextAttribute.SIZE, size + 2);
                jc.setFont(f.deriveFont(tas));
                jc.setForeground(Color.pink);
                break;
            default:
                jc.setForeground(Color.gray);
            }

            switch (column) {
            case 0:
                if (jc instanceof JLabel) {
                    ((JLabel) jc).setHorizontalAlignment(JTextField.CENTER);
                }
                break;
            }

            return c;
        }

        private static final long serialVersionUID = 1L;
    }

    private static final long serialVersionUID = 1L;
}
