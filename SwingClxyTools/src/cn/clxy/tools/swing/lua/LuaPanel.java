package cn.clxy.tools.swing.lua;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import javax.swing.ActionMap;
import javax.swing.JFileChooser;
import javax.swing.JLabel;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jdesktop.application.Action;
import org.jdesktop.application.Application;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.Task;
import org.jdesktop.application.Task.BlockingScope;
import org.jdesktop.beansbinding.AutoBinding;
import org.jdesktop.beansbinding.BindingGroup;

import cn.clxy.tools.core.Messenger;
import cn.clxy.tools.core.swing.ColumnInfo;
import cn.clxy.tools.core.swing.SwingUtil;
import cn.clxy.tools.core.swing.TableBinding;
import cn.clxy.tools.core.utils.StringUtil;
import cn.clxy.tools.swing.App;
import cn.clxy.tools.swing.lua.domain.Character;
import cn.clxy.tools.swing.lua.domain.Filter;
import cn.clxy.tools.swing.lua.service.ItemInfoService;
import cn.clxy.tools.swing.lua.service.ItemService;

import com.google.inject.Inject;

/**
 * Memo list panel
 * @author clxy7
 */
public class LuaPanel extends javax.swing.JPanel {

    private ItemService itemService;
    private ItemInfoService itemInfoService;

    @Inject
    public LuaPanel(ItemService itemService, ItemInfoService itemInfoService) {

        super();
        this.itemService = itemService;
        this.itemInfoService = itemInfoService;

        initComponents();
        initBinding();
    }

    @Action(block = BlockingScope.COMPONENT)
    public <T, V> Task<T, V> find() {

        final String wowpath = pathTextField.getText();
        if (StringUtil.isBlank(wowpath)) {
            return null;
        }

        return new Task<T, V>(App.getApplication()) {

            @Override
            protected T doInBackground() throws Exception {

                stopButton.setEnabled(true);

                Messenger messenger = new Messenger() {
                    public void say(String msg) {
                        setMessage(msg);
                    }
                };
                itemService.setMessenger(messenger);
                itemInfoService.setMessenger(messenger);

                try {

                    List<Character> cs = itemService.search(wowpath);
                    ItemsTable table = (ItemsTable) itemsTable;
                    itemInfoService.setItemInfo(cs);
                    table.setCharacters(cs);
                    setResultMsg("Analyzed. " + cs.size() + " character(s).");

                    SwingUtil.packRows(table);
                } catch (Exception e) {
                    log.error(e);
                } finally {
                    stopButton.setEnabled(false);
                }
                return null;
            }
        };
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        wowPathFileChooser = new javax.swing.JFileChooser();
        listPanel = new javax.swing.JPanel();
        condPanel = new javax.swing.JPanel();
        pathTextField = new javax.swing.JTextField();
        itemLabel = new javax.swing.JLabel();
        browseButton = new javax.swing.JButton();
        itemTextField = new javax.swing.JTextField();
        charaTextField = new javax.swing.JTextField();
        charaLabel = new javax.swing.JLabel();
        pathLabel = new javax.swing.JLabel();
        buttonPanel = new javax.swing.JPanel();
        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        filterButton = new javax.swing.JButton();
        resultLabel = new javax.swing.JLabel();
        itemsScrollPane = new javax.swing.JScrollPane();
        itemsTable = new ItemsTable(new ArrayList<Character>(), columnInfos);

        wowPathFileChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        wowPathFileChooser.setName("wowPathFileChooser"); // NOI18N

        setMinimumSize(new java.awt.Dimension(293, 190));
        setName("Form"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        listPanel.setName("listPanel"); // NOI18N
        listPanel.setOpaque(false);
        listPanel.setLayout(new java.awt.BorderLayout());

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application
                .getInstance(cn.clxy.tools.swing.App.class).getContext()
                .getResourceMap(LuaPanel.class);
        condPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap
                .getString("condPanel.border.title"))); // NOI18N
        condPanel.setName("condPanel"); // NOI18N
        condPanel.setOpaque(false);
        condPanel.setLayout(new java.awt.GridBagLayout());

        pathTextField.setText(resourceMap.getString("pathTextField.text")); // NOI18N
        pathTextField.setName("pathTextField"); // NOI18N
        pathTextField.setPreferredSize(new java.awt.Dimension(180, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        condPanel.add(pathTextField, gridBagConstraints);

        itemLabel.setText(resourceMap.getString("itemLabel.text")); // NOI18N
        itemLabel.setName("itemLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        condPanel.add(itemLabel, gridBagConstraints);

        browseButton.setText(resourceMap.getString("browseButton.text")); // NOI18N
        browseButton.setName("browseButton"); // NOI18N
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        condPanel.add(browseButton, gridBagConstraints);

        itemTextField.setName("itemTextField"); // NOI18N
        itemTextField.setPreferredSize(new java.awt.Dimension(180, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        condPanel.add(itemTextField, gridBagConstraints);

        charaTextField.setName("charaTextField"); // NOI18N
        charaTextField.setPreferredSize(new java.awt.Dimension(180, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        condPanel.add(charaTextField, gridBagConstraints);

        charaLabel.setText(resourceMap.getString("charaLabel.text")); // NOI18N
        charaLabel.setName("charaLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        condPanel.add(charaLabel, gridBagConstraints);

        pathLabel.setText(resourceMap.getString("pathLabel.text")); // NOI18N
        pathLabel.setName("pathLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        condPanel.add(pathLabel, gridBagConstraints);

        buttonPanel.setName("buttonPanel"); // NOI18N
        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 50, 5));

        startButton.setText(resourceMap.getString("startButton.text")); // NOI18N
        startButton.setName("startButton"); // NOI18N
        buttonPanel.add(startButton);

        stopButton.setText(resourceMap.getString("stopButton.text")); // NOI18N
        stopButton.setEnabled(false);
        stopButton.setName("stopButton"); // NOI18N
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(stopButton);

        filterButton.setText(resourceMap.getString("filterButton.text")); // NOI18N
        filterButton.setName("filterButton"); // NOI18N
        filterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(filterButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        condPanel.add(buttonPanel, gridBagConstraints);

        resultLabel.setText(resourceMap.getString("resultLabel.text")); // NOI18N
        resultLabel.setName("resultLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        condPanel.add(resultLabel, gridBagConstraints);

        listPanel.add(condPanel, java.awt.BorderLayout.PAGE_START);

        itemsScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap
                .getString("itemsScrollPane.border.title"))); // NOI18N
        itemsScrollPane.setName("itemsScrollPane"); // NOI18N

        itemsTable.setAutoCreateRowSorter(true);
        itemsTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        itemsTable.setColumnSelectionAllowed(true);
        itemsTable.setGridColor(resourceMap.getColor("itemsTable.gridColor")); // NOI18N
        itemsTable.setName("itemsTable"); // NOI18N
        SwingUtil.setTableHeaderAlignment(itemsTable, JLabel.CENTER);
        itemsTable.getTableHeader().setReorderingAllowed(false);
        itemsTable.setRowHeight(25);
        itemsTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        itemsScrollPane.setViewportView(itemsTable);

        listPanel.add(itemsScrollPane, java.awt.BorderLayout.CENTER);

        add(listPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void filterButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_filterButtonActionPerformed

        String itemName = itemTextField.getText();
        String charaName = charaTextField.getText();
        ItemsTable table = (ItemsTable) itemsTable;

        if (StringUtil.isBlank(charaName) && StringUtil.isBlank(itemName)) {
            table.doFilter(null);
        } else
            table.doFilter(new Filter(itemName, charaName));

        setResultMsg("Filtered.");

    }// GEN-LAST:event_filterButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_stopButtonActionPerformed
        itemService.stop();
        itemInfoService.stop();
    }// GEN-LAST:event_stopButtonActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_browseButtonActionPerformed

        String wowPath = pathTextField.getText();
        if (!StringUtil.isBlank(wowPath)) {
            wowPathFileChooser.setCurrentDirectory(new File(wowPath));
        }

        int returnVal = wowPathFileChooser.showOpenDialog(this);
        if (returnVal != JFileChooser.APPROVE_OPTION) {
            return;
        }

        File file = wowPathFileChooser.getSelectedFile();
        pathTextField.setText(file.getAbsolutePath());
        setResultMsg("Not analyze yet.");
    }// GEN-LAST:event_browseButtonActionPerformed

    protected void doFind(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_doFind
        find();
    }// GEN-LAST:event_doFind
     // Variables declaration - do not modify//GEN-BEGIN:variables

    private javax.swing.JButton browseButton;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JLabel charaLabel;
    private javax.swing.JTextField charaTextField;
    private javax.swing.JPanel condPanel;
    private javax.swing.JButton filterButton;
    private javax.swing.JLabel itemLabel;
    private javax.swing.JTextField itemTextField;
    private javax.swing.JScrollPane itemsScrollPane;
    private javax.swing.JTable itemsTable;
    private javax.swing.JPanel listPanel;
    private javax.swing.JLabel pathLabel;
    private javax.swing.JTextField pathTextField;
    private javax.swing.JLabel resultLabel;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JFileChooser wowPathFileChooser;
    // End of variables declaration//GEN-END:variables
    private static final Application app = Application.getInstance(App.class);
    private static final ResourceMap resource = app.getContext().getResourceMap(LuaPanel.class);
    private static final List<ColumnInfo> columnInfos = ColumnInfo.getColumns(resource);
    private static final Log log = LogFactory.getLog(LuaPanel.class);

    /**
     * Default serialVersion.
     */
    private static final long serialVersionUID = 1L;

    private void initBinding() {

        BindingGroup group = new BindingGroup();
        TableBinding tableBinding = ((ItemsTable) itemsTable)
                .getBinding(AutoBinding.UpdateStrategy.READ);
        group.addBinding(tableBinding.getBinding());
        group.bind();

        ActionMap actionMap = App.getInstance().getContext().getActionMap(LuaPanel.class, this);
        startButton.setAction(actionMap.get("find"));
    }

    private void setResultMsg(String msg) {
        msg += itemsTable.getRowCount() + " item(s).";
        resultLabel.setText(msg);
    }
}
