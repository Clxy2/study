package cn.clxy.tools.swing.memo;

import java.text.ParseException;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.text.MaskFormatter;

import org.jdesktop.application.Action;
import org.jdesktop.beansbinding.AutoBinding;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.Bindings;

import cn.clxy.tools.core.swing.SwingUtil;
import cn.clxy.tools.core.utils.StringUtil;
import cn.clxy.tools.swing.memo.domain.EditInfo;
import cn.clxy.tools.swing.memo.domain.Memo;
import cn.clxy.tools.swing.memo.domain.Tag;
import cn.clxy.tools.swing.memo.service.MemoService;
import cn.clxy.tools.swing.memo.service.TagService;

/**
 * Memo edit panel.
 * @author clxy7
 */
public class MemoEditPanel extends javax.swing.JPanel {

    private Memo memo = new Memo();
    private List<Tag> tags;
    private MemoService memoService;
    private TagService tagService;
    private BindingGroup group;

    /** Creates new form MemoEditPanel */
    public MemoEditPanel(MemoService memoService, TagService tagService) {

        super();
        this.memoService = memoService;
        this.tagService = tagService;
        this.memo = new Memo();
        initComponents();
        hideComponents();

        tags = tagService.searchAll();
        tags.add(0, null);
        tagComboBox.setModel(new DefaultComboBoxModel(tags.toArray()));

        bindings();
    }

    @Action
    public void save() {

        // TODO Validate should be emn ... but so small...
        String content = memo.getContent();
        if (StringUtil.isBlank(content)) {
            JOptionPane.showMessageDialog(this, "Content should be typed something.",
                    "Content error", JOptionPane.ERROR_MESSAGE);

            contentTextArea.requestFocus();
            return;
        }

        group.unbind();

        EditInfo ei = memo.getEditInfo();
        Date today = new Date();
        if (memo.getId() == null) {
            ei.setCreateTime(today);
        }
        ei.setUpdateTime(today);

        Tag tag = memo.getTag();
        if (!tags.contains(tag)) {
            tags.add(tag);
        }
        tagService.edit(tag);
        memoService.edit(memo);

        memo = new Memo();
        bindings();

        if (!continueCheckBox.isSelected()) {
            close();
        }
    }

    @Action
    public void close() {
        SwingUtil.disposeWindow(this);
    }

    public void setMemo(Memo memo) {

        group.unbind();
        this.memo = memo;
        bindings();
    }

    private void bindings() {

        group = new BindingGroup();
        AutoBinding finished = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, memo,
                BeanProperty.create("finished"), finishedCheckBox, BeanProperty.create("selected"));
        group.addBinding(finished);

        AutoBinding content = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, memo,
                BeanProperty.create("content"), contentTextArea, BeanProperty.create("text"));
        group.addBinding(content);

        AutoBinding tag = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, memo, BeanProperty
                .create("tag"), tagComboBox, BeanProperty.create("selectedItem"));
        group.addBinding(tag);

        // TODO Need more work to format string -> Date.
        // AutoBinding create = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, memo,
        // BeanProperty.create("createDate"), createTextField, BeanProperty.create("value"));
        // group.addBinding(create);

        group.bind();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        contentLabel = new javax.swing.JLabel();
        finishedCheckBox = new javax.swing.JCheckBox();
        createLabel = new javax.swing.JLabel();
        contentScrollPane = new javax.swing.JScrollPane();
        contentTextArea = new javax.swing.JTextArea();
        tagLabel = new javax.swing.JLabel();
        continueCheckBox = new javax.swing.JCheckBox();
        updateLabel = new javax.swing.JLabel();
        buttonPanel = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        tagComboBox = new javax.swing.JComboBox();
        updateTextField = new javax.swing.JFormattedTextField(dateMask);
        createTextField = new javax.swing.JFormattedTextField(dateMask);

        setName("Form"); // NOI18N
        setLayout(new java.awt.GridBagLayout());

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application
                .getInstance(cn.clxy.tools.swing.App.class).getContext().getResourceMap(
                        MemoEditPanel.class);
        contentLabel.setText(resourceMap.getString("contentLabel.text")); // NOI18N
        contentLabel.setName("contentLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(contentLabel, gridBagConstraints);

        finishedCheckBox.setText(resourceMap.getString("finishedCheckBox.text")); // NOI18N
        finishedCheckBox.setName("finishedCheckBox"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(finishedCheckBox, gridBagConstraints);

        createLabel.setText(resourceMap.getString("createLabel.text")); // NOI18N
        createLabel.setName("createLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(createLabel, gridBagConstraints);

        contentScrollPane
                .setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        contentScrollPane
                .setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        contentScrollPane.setName("contentScrollPane"); // NOI18N
        contentScrollPane.setPreferredSize(new java.awt.Dimension(300, 180));

        contentTextArea.setColumns(20);
        contentTextArea.setLineWrap(true);
        contentTextArea.setRows(5);
        contentTextArea.setName("contentTextArea"); // NOI18N
        contentScrollPane.setViewportView(contentTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 14);
        add(contentScrollPane, gridBagConstraints);

        tagLabel.setText(resourceMap.getString("tagLabel.text")); // NOI18N
        tagLabel.setName("tagLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(tagLabel, gridBagConstraints);

        continueCheckBox.setSelected(true);
        continueCheckBox.setText(resourceMap.getString("continueCheckBox.label")); // NOI18N
        continueCheckBox.setName("continueCheckBox"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(continueCheckBox, gridBagConstraints);

        updateLabel.setText(resourceMap.getString("updateLabel.text")); // NOI18N
        updateLabel.setName("updateLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(updateLabel, gridBagConstraints);

        buttonPanel.setName("buttonPanel"); // NOI18N
        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 100, 20));

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(
                cn.clxy.tools.swing.App.class).getContext().getActionMap(MemoEditPanel.class, this);
        saveButton.setAction(actionMap.get("save")); // NOI18N
        saveButton.setText(resourceMap.getString("saveButton.text")); // NOI18N
        saveButton.setName("saveButton"); // NOI18N
        buttonPanel.add(saveButton);

        closeButton.setAction(actionMap.get("close")); // NOI18N
        closeButton.setText(resourceMap.getString("closeButton.text")); // NOI18N
        closeButton.setName("closeButton"); // NOI18N
        buttonPanel.add(closeButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(buttonPanel, gridBagConstraints);

        tagComboBox.setEditable(true);
        tagComboBox.setEditor(new TagComboBoxEditor());
        tagComboBox.setName("tagComboBox"); // NOI18N
        tagComboBox.setPreferredSize(new java.awt.Dimension(122, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(tagComboBox, gridBagConstraints);

        updateTextField.setText(resourceMap.getString("updateTextField.text")); // NOI18N
        updateTextField.setToolTipText(resourceMap.getString("updateTextField.toolTipText")); // NOI18N
        updateTextField.setName("updateTextField"); // NOI18N
        updateTextField.setPreferredSize(new java.awt.Dimension(100, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(updateTextField, gridBagConstraints);

        createTextField.setToolTipText(resourceMap.getString("createTextField.toolTipText")); // NOI18N
        createTextField.setName("createTextField"); // NOI18N
        createTextField.setPreferredSize(new java.awt.Dimension(100, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(createTextField, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel contentLabel;
    private javax.swing.JScrollPane contentScrollPane;
    private javax.swing.JTextArea contentTextArea;
    private javax.swing.JCheckBox continueCheckBox;
    private javax.swing.JLabel createLabel;
    private javax.swing.JFormattedTextField createTextField;
    private javax.swing.JCheckBox finishedCheckBox;
    private javax.swing.JButton saveButton;
    private javax.swing.JComboBox tagComboBox;
    private javax.swing.JLabel tagLabel;
    private javax.swing.JLabel updateLabel;
    private javax.swing.JFormattedTextField updateTextField;
    // End of variables declaration//GEN-END:variables
    private static MaskFormatter dateMask = null;
    /**
     * Default serial version.
     */
    private static final long serialVersionUID = 1L;

    static {
        try {
            dateMask = new MaskFormatter("####-##-##");
            // dateMask.setPlaceholderCharacter('_');
        } catch (ParseException ex) {
            Logger.getLogger(MemoEditPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Hide the uneditable component. temporary.
     */
    private void hideComponents() {
        createLabel.setVisible(false);
        createTextField.setVisible(false);
        updateLabel.setVisible(false);
        updateTextField.setVisible(false);
    }
}
