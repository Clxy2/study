package cn.clxy.tools.swing.memo;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

import org.jdesktop.application.Action;
import org.jdesktop.application.Application;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.Task;
import org.jdesktop.beansbinding.AutoBinding;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;

import cn.clxy.tools.core.swing.ColumnInfo;
import cn.clxy.tools.core.swing.FormattedTextFieldRenderer;
import cn.clxy.tools.core.swing.SwingUtil;
import cn.clxy.tools.core.swing.TableBinding;
import cn.clxy.tools.core.swing.TextAreaRenderer;
import cn.clxy.tools.swing.App;
import cn.clxy.tools.swing.memo.domain.Memo;
import cn.clxy.tools.swing.memo.domain.Tag;
import cn.clxy.tools.swing.memo.service.MemoService;
import cn.clxy.tools.swing.memo.service.TagService;

import com.google.inject.Inject;

/**
 * Memo list panel
 * @author clxy7
 */
public class MemoListPanel extends javax.swing.JPanel {

    private MemoService memoService;
    private TableBinding tableBinding;
    private List<Memo> memos = new ArrayList<Memo>();
    private TagService tagService;
    private JComboBoxBinding tagBinding;
    private List<Tag> tags = new ArrayList<Tag>();

    /** Creates new form MemoListPanel */
    @Inject
    public MemoListPanel(MemoService memoService, TagService tagService) {

        super();
        this.memoService = memoService;
        this.tagService = tagService;

        initComponents();
        saveButton.setVisible(false);
        initBinding();

        doFind(null);
    }

    /**
     * 検索する。<br>
     * Tagとmemoを更新する。
     */
    @Action
    public void find() {

        final Map<String, Object> condition = new HashMap<String, Object>();
        condition.put("content", contentTextField.getText());
        condition.put("tag", tagComboBox.getSelectedItem());
        condition.put("finished", finishedCheckBox.isSelected());

        // Initialize tags.
        List<Tag> ts = tagService.searchAll();
        tags.clear();
        tags.add(null);
        tags.addAll(ts);
        tagBinding.refresh();

        // Search memo.
        List<Memo> ms = memoService.search(condition);
        tableBinding.unbind();
        memos.clear();
        memos.addAll(ms);
        tableBinding.bind();
    }

    @Action(block = Task.BlockingScope.WINDOW)
    public Task save() {

        return new Task(app) {

            @Override
            protected Object doInBackground() throws Exception {
                memoService.merge(memos, memos);
                return null;
            }
        };
    }

    @Action(block = Task.BlockingScope.WINDOW)
    public Task delete() {

        final int[] indexs = memosTable.getSelectedRows();
        final List<Memo> deletes = new ArrayList<Memo>();
        for (int i = 0, l = indexs.length; i < l; i++) {
            deletes.add(memos.get(memosTable.convertRowIndexToModel(indexs[i])));
        }

        if (deletes.size() == 0) {
            return null;
        }

        // TODO Get messages from resource.
        if (JOptionPane.showConfirmDialog(this,
                "Are you sure delete " + deletes.size() + " memoes?\r\nClick OK to delete.",
                "Memo Delete", JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE) == JOptionPane.CANCEL_OPTION) {
            return null;
        }

        return new Task(app) {

            @Override
            protected Object doInBackground() throws Exception {

                memoService.delete(deletes);
                memos.removeAll(deletes);
                return null;
            }
        };
    }

    @Action
    public void showAddForm() {

        ((MemoEditPanel) editPanel).setMemo(new Memo());
        editDialog.pack();
        editDialog.setLocationRelativeTo(this);
        editDialog.setVisible(true);
    }

    @Action
    public void showEditForm() {

        final int[] indexs = memosTable.getSelectedRows();
        if (indexs.length == 0) {
            return;
        }

        Memo memo = memos.get(memosTable.convertRowIndexToModel(indexs[0]));
        ((MemoEditPanel) editPanel).setMemo(memo);
        editDialog.pack();
        editDialog.setLocationRelativeTo(this);
        editDialog.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        editDialog = new javax.swing.JDialog();
        editPanel = new MemoEditPanel(memoService, tagService);
        toolbarPanel = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        listPanel = new javax.swing.JPanel();
        searchPanel = new javax.swing.JPanel();
        contentLabel = new javax.swing.JLabel();
        contentTextField = new javax.swing.JTextField();
        tagLabel = new javax.swing.JLabel();
        tagComboBox = new javax.swing.JComboBox();
        finishedCheckBox = new javax.swing.JCheckBox();
        finishedLabel = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        memosScrollPane = new javax.swing.JScrollPane();
        memosTable = new MemoTable(memos, columnInfos);

        editDialog.setAlwaysOnTop(true);
        editDialog.setModal(true);
        editDialog.setName("editDialog"); // NOI18N

        editPanel.setName("editPanel"); // NOI18N
        editDialog.getContentPane().add(editPanel, java.awt.BorderLayout.CENTER);

        setMinimumSize(new java.awt.Dimension(293, 190));
        setName("Form"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        toolbarPanel.setName("toolbarPanel"); // NOI18N
        toolbarPanel.setOpaque(false);
        toolbarPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 50, 5));

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(cn.clxy.tools.swing.App.class).getContext().getActionMap(MemoListPanel.class, this);
        addButton.setAction(actionMap.get("showAddForm")); // NOI18N
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(cn.clxy.tools.swing.App.class).getContext().getResourceMap(MemoListPanel.class);
        addButton.setText(resourceMap.getString("addButton.text")); // NOI18N
        addButton.setName("addButton"); // NOI18N
        addButton.setPreferredSize(new java.awt.Dimension(90, 25));
        toolbarPanel.add(addButton);

        editButton.setAction(actionMap.get("showEditForm")); // NOI18N
        editButton.setText(resourceMap.getString("editButton.text")); // NOI18N
        editButton.setName("editButton"); // NOI18N
        editButton.setPreferredSize(new java.awt.Dimension(90, 25));
        toolbarPanel.add(editButton);

        saveButton.setAction(actionMap.get("save")); // NOI18N
        saveButton.setText(resourceMap.getString("saveButton.text")); // NOI18N
        saveButton.setName("saveButton"); // NOI18N
        saveButton.setPreferredSize(new java.awt.Dimension(90, 25));
        toolbarPanel.add(saveButton);

        deleteButton.setAction(actionMap.get("delete")); // NOI18N
        deleteButton.setText(resourceMap.getString("deleteButton.text")); // NOI18N
        deleteButton.setName("deleteButton"); // NOI18N
        deleteButton.setPreferredSize(new java.awt.Dimension(90, 25));
        toolbarPanel.add(deleteButton);

        add(toolbarPanel, java.awt.BorderLayout.PAGE_END);

        listPanel.setName("listPanel"); // NOI18N
        listPanel.setOpaque(false);
        listPanel.setLayout(new java.awt.BorderLayout());

        searchPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("searchPanel.border.title"))); // NOI18N
        searchPanel.setName("searchPanel"); // NOI18N
        searchPanel.setOpaque(false);
        searchPanel.setLayout(new java.awt.GridBagLayout());

        contentLabel.setText(resourceMap.getString("contentLabel.text")); // NOI18N
        contentLabel.setName("contentLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        searchPanel.add(contentLabel, gridBagConstraints);

        contentTextField.setText(resourceMap.getString("contentTextField.text")); // NOI18N
        contentTextField.setName("contentTextField"); // NOI18N
        contentTextField.setPreferredSize(new java.awt.Dimension(180, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        searchPanel.add(contentTextField, gridBagConstraints);

        tagLabel.setText(resourceMap.getString("tagLabel.text")); // NOI18N
        tagLabel.setName("tagLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        searchPanel.add(tagLabel, gridBagConstraints);

        tagComboBox.setEditor(new TagComboBoxEditor());
        tagComboBox.setName("tagComboBox"); // NOI18N
        tagComboBox.setPreferredSize(new java.awt.Dimension(122, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        searchPanel.add(tagComboBox, gridBagConstraints);

        finishedCheckBox.setText(resourceMap.getString("finishedCheckBox.text")); // NOI18N
        finishedCheckBox.setName("finishedCheckBox"); // NOI18N
        finishedCheckBox.setOpaque(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        searchPanel.add(finishedCheckBox, gridBagConstraints);

        finishedLabel.setText(resourceMap.getString("finishedLabel.text")); // NOI18N
        finishedLabel.setName("finishedLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        searchPanel.add(finishedLabel, gridBagConstraints);

        searchButton.setAction(actionMap.get("find")); // NOI18N
        searchButton.setText(resourceMap.getString("searchButton.text")); // NOI18N
        searchButton.setName("searchButton"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 2;
        searchPanel.add(searchButton, gridBagConstraints);

        listPanel.add(searchPanel, java.awt.BorderLayout.PAGE_START);

        memosScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("memosScrollPane.border.title"))); // NOI18N
        memosScrollPane.setName("memosScrollPane"); // NOI18N

        memosTable.setAutoCreateRowSorter(true);
        memosTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        memosTable.setGridColor(resourceMap.getColor("memosTable.gridColor")); // NOI18N
        memosTable.setName("memosTable"); // NOI18N
        SwingUtil.setTableHeaderAlignment(memosTable, JLabel.CENTER);
        memosTable.getTableHeader().setReorderingAllowed(false);
        memosTable.setRowHeight(25);
        memosTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                memosClickListener(evt);
            }
        });
        memosScrollPane.setViewportView(memosTable);

        listPanel.add(memosScrollPane, java.awt.BorderLayout.CENTER);

        add(listPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void memosClickListener(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_memosClickListener
        if (evt.getClickCount() != 2) {
            return;
        }
        showEditForm();
    }//GEN-LAST:event_memosClickListener

    private void doFind(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_doFind
        find();
    }// GEN-LAST:event_doFind

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JLabel contentLabel;
    private javax.swing.JTextField contentTextField;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JDialog editDialog;
    private javax.swing.JPanel editPanel;
    private javax.swing.JCheckBox finishedCheckBox;
    private javax.swing.JLabel finishedLabel;
    private javax.swing.JPanel listPanel;
    private javax.swing.JScrollPane memosScrollPane;
    private javax.swing.JTable memosTable;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JComboBox tagComboBox;
    private javax.swing.JLabel tagLabel;
    private javax.swing.JPanel toolbarPanel;
    // End of variables declaration//GEN-END:variables
    private static final Application app = Application.getInstance(App.class);
    private static final ResourceMap resource = app.getContext().getResourceMap(MemoListPanel.class);
    private static final List<ColumnInfo> columnInfos = ColumnInfo.getColumns(resource);
    /**
     * Default serialVersion.
     */
    private static final long serialVersionUID = 1L;

    private void initBinding() {

        BindingGroup group = new BindingGroup();
        tableBinding = ((MemoTable) memosTable).getBinding(AutoBinding.UpdateStrategy.READ_WRITE);
        group.addBinding(tableBinding.getBinding());

        tagBinding = SwingBindings.createJComboBoxBinding(
                AutoBinding.UpdateStrategy.READ, tags, tagComboBox);
        group.addBinding(tagBinding);

        group.bind();

        TableColumnModel columns = memosTable.getColumnModel();
        // Tag
        TableColumn tag = columns.getColumn(1);
        tag.setCellRenderer(new FormattedTextFieldRenderer());

        // Content
        TableColumn content = columns.getColumn(2);
        //content.setCellEditor(new TextAreaEditor());
        content.setCellRenderer(new TextAreaRenderer());

        // Create date and update date.
        String dateFormat = resource.getString("date.format");
        TableColumn create = columns.getColumn(3);
        create.setCellRenderer(new FormattedTextFieldRenderer(new SimpleDateFormat(dateFormat)));
        TableColumn update = columns.getColumn(4);
        update.setCellRenderer(new FormattedTextFieldRenderer(new SimpleDateFormat(dateFormat)));
    }
}
